import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Define the directory containing subject Excel files
directory = "C:/Users/thaplood2/Documents/Story_Math_analysis/common/"  # Replace with actual path

# Initialize an empty DataFrame to collect data from all subjects
all_data = pd.DataFrame()

# Process each subject's file
for file_name in os.listdir(directory):
    if file_name.endswith(".xlsx"):  # Process only Excel files
        file_path = os.path.join(directory, file_name)
        xls = pd.ExcelFile(file_path)

        # Read relevant sheets
        lh_math = pd.read_excel(xls, sheet_name='LH_fc_math', header=None)
        lh_story = pd.read_excel(xls, sheet_name='LH_fc_story', header=None)
        lh_conn = pd.read_excel(xls, sheet_name='LH_conn', header=None)

        # Extract edge names (excluding header)
        edges = lh_conn.iloc[1:, 0].astype(str) + " - " + lh_conn.iloc[1:, 1].astype(str)  # Combine columns A & B

        # Extract time points (first row of data sheets)
        time_points = lh_math.iloc[0, :].values  # Use first row as time points

        # Convert data into long format for visualization
        def reshape_data(df, condition):
            df_data = df.iloc[1:].copy()  # Exclude first row (time points)
            df_data.columns = time_points  # Assign time points as column names
            df_data['Edge'] = edges.values  # Assign edge names
            df_long = df_data.melt(id_vars=['Edge'], var_name='Time Point', value_name='Correlation')
            df_long['Condition'] = condition
            df_long['Subject'] = file_name  # Add subject identifier
            return df_long

        math_data = reshape_data(lh_math, 'Math')
        story_data = reshape_data(lh_story, 'Story')

        # Append data for all subjects
        all_data = pd.concat([all_data, math_data, story_data], ignore_index=True)

# Convert Time Point column to numeric for proper plotting
all_data['Time Point'] = pd.to_numeric(all_data['Time Point'])

### OPTION 1: Single Line Plot for All Edges ###
plt.figure(figsize=(20, 10))
sns.lineplot(data=all_data, x='Time Point', y='Correlation', hue='Edge', 
             style='Condition', palette='tab10', alpha=0.5)

plt.xlabel("Time Point", fontsize=14)
plt.ylabel("Correlation", fontsize=14)
plt.title("Functional Connectivity Changes Over Time (All Edges)", fontsize=16)
plt.xticks(rotation=45, fontsize=10)
plt.yticks(fontsize=12)
plt.legend(title="Edge", bbox_to_anchor=(1.05, 1), loc='upper left')  # Place legend outside the plot
plt.show()


### OPTION 2: Facet Grid - One Small Plot Per Edge ###
g = sns.FacetGrid(all_data, col="Edge", col_wrap=5, height=3, sharey=True)
g.map_dataframe(sns.lineplot, x="Time Point", y="Correlation", hue="Condition", alpha=0.7)
g.set_axis_labels("Time Point", "Correlation")
g.set_titles(col_template="{col_name}")
g.add_legend()
plt.show()
